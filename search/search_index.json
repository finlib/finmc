{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is finmc?","text":"<p>The <code>finmc</code> package contains Monte-Carlo implementations of many financial models derived from a common interface class. This interface allows computation of instruments with european, and american payoffs, as well as path dependent calculations.</p> <p></p>"},{"location":"#why-do-we-need-a-common-interface","title":"Why do we need a common interface?","text":"<ul> <li>Shared utilities can be used for all models for tasks such as calculating implied vol surface.</li> <li>Price Calculators can be model invariant.</li> <li>The interace is designed for high performance, even with a large number of paths.</li> <li>New models can be created outside this repositary, by indepedent contributors, and yet be compatible with above utilities and calculators.</li> </ul>"},{"location":"#getting-started","title":"Getting started.","text":"<p>Install it from PyPI</p> <pre><code>pip install finmc\n</code></pre> <p>This is an example of pricing a vanilla option using the local volatility model.</p> <pre><code>import numpy as np\nfrom finmc.models.localvol import LVMC\nfrom finmc.calc.option import opt_price_mc\n\n# Define Dataset with zero rate curve, and forward curve.\ndataset = {\n    \"MC\": {\"PATHS\": 100_000, \"TIMESTEP\": 1 / 250},\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\n        \"USD\":(\"ZERO_RATES\", np.array([[2.0, 0.05]])),\n        \"SPX\": (\"FORWARD\", np.array([[0.0, 5500], [1.0, 5600]])),\n        },\n    \"LV\": {\"ASSET\": \"SPX\", \"VOL\": 0.3},\n}\n\nmodel = LVMC(dataset)\nprice = opt_price_mc(5500.0, 1.0, \"Call\", \"SPX\", model)\n</code></pre>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li>Dataset creation guide</li> <li>Models included in the package</li> </ul>"},{"location":"calculators/","title":"Calculators","text":"<p>This module contains shared calculators that can be used for all models, for calculations such as the price of vanilla options.</p> <p>Utility to calculate prices of european contracts from a MC Simulation model.</p> <p>Utility to calculate prices of bonds from a MC Simulation model.</p>"},{"location":"calculators/#finmc.calc.option.opt_price_mc","title":"<code>opt_price_mc(strike, maturity, option_type, asset_name, model)</code>","text":"<p>Calculate the price of a Vanilla European Option using MC Simulation.</p> <p>Parameters:</p> Name Type Description Default <code>strike</code> <code>float</code> <p>The strike price of the option.</p> required <code>maturity</code> <code>float</code> <p>The time to maturity of the option in years.</p> required <code>option_type</code> <code>str</code> <p>The type of the option. Either \"Call\" or \"Put\".</p> required <code>asset_name</code> <code>str</code> <p>The name of the asset.</p> required <code>model</code> <code>MCBase</code> <p>The model used to simulate the asset price.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The price of the option.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; price = opt_price_mc(K, T, \"Call\", \"SPX\", model)\n</code></pre>"},{"location":"calculators/#finmc.calc.bond.zcb_price_mc","title":"<code>zcb_price_mc(maturity, asset_name, model)</code>","text":"<p>Calculate the price of a Zero Coupon Bond using MC Simulation.</p> <p>Parameters:</p> Name Type Description Default <code>maturity</code> <code>float</code> <p>The time to maturity of the bond in years.</p> required <code>asset_name</code> <code>str</code> <p>The name of the asset.</p> required <code>model</code> <code>MCBase</code> <p>The model used to simulate the asset price.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The price of the zero coupon bond.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; price = zcb_price_mc(T, \"USD\", model)\n</code></pre>"},{"location":"dataset/","title":"Dataset","text":"<p>The dataset for finmc models is a dictionary with the following components</p> <ul> <li>BASE String containing the name of the base asset, i.e. the currency in which the price is denominated. e.g. \"USD\".</li> <li>MC Dict containing common MC parameters.</li> <li>ASSETS Dict containing forwards of all assets in the model, including the base asset. See Forwards and Rates for more.</li> <li>{Model Name} Dict containing parameters specific to the model. See the models section for more.</li> </ul>"},{"location":"dataset/#mc-parameters","title":"MC Parameters","text":"<p>The MC section has the following parameters.</p> <ul> <li>PATHS: The number of Monte-Carlo paths.</li> <li>TIMESTEP: The incremental timestep of simulation (in years). </li> <li>SEED (Optional): The seed for the random number generator.</li> </ul> <p>e.g. <pre><code>\"MC\": {\n    \"PATHS\": 100_000,\n    \"TIMESTEP\": 1 / 250,\n    \"SEED\": 1,\n},\n</code></pre></p>"},{"location":"dataset/#complete-example","title":"Complete Example","text":"<pre><code>import numpy as np\n\ndataset = {\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\n        \"USD\": (\"ZERO_RATES\", np.array([[2.0, 0.05]])),\n        \"SPX\": (\"FORWARD\", np.array([[0.0, 5500], [1.0, 5600]])),\n    },\n    \"MC\": {\n        \"PATHS\": 100_000,\n        \"TIMESTEP\": 1 / 250,\n        \"SEED\": 1,\n    },\n    \"HESTON\": {\n        \"ASSET\": \"SPX\",\n        \"INITIAL_VAR\": 0.015,\n        \"LONG_VAR\": 0.052,\n        \"VOL_OF_VAR\": 0.88,\n        \"MEANREV\": 2.78,\n        \"CORRELATION\": -0.85,\n    }\n}\n</code></pre>"},{"location":"forwards/","title":"Forwards","text":"<p>You can describe any asset forward using a two-column (N X 2) numpy array, where the first column is time, and the second represents forwards, e.g.</p> <pre><code>fwd_data = (\"FORWARD\", np.array([\n    [0.0, 5500],\n    [1.0, 5600],\n    [2.0, 5700]\n]))\n\ndataset = {\n    \"MC\": ...,\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\n        \"USD\": ...,\n        \"SPX\": (\"FORWARD\", fwd_data),\n    },\n    ...model specific parameters\n}\n</code></pre> <p>or alternatively, using <code>np.column_stack</code> from two arrays</p> <pre><code>spot = 2900\ndiv_rate = 0.01\ntimes = np.array([0.0, 1.0, 2.0, 5.0])\nrates = np.array([0.04, 0.04, 0.045, 0.05])\nfwds = spot * np.exp((rates - div_rate) * times)\nfwd_data = (\"FORWARDS\", np.column_stack((times, fwds)))\n</code></pre> <p>For complete dataset see dataset</p>"},{"location":"rates/","title":"Rates","text":"<p>You can describe the base asset using a two-column (N X 2) numpy array, where the first column is time, and the second represents term zero rates, e.g.</p> <pre><code>[[1.   0.05]\n [2.   0.045]\n [5.   0.04]]\n</code></pre> <p>It can be created like</p> <pre><code>discount_data = (\"ZERO_RATES\", np.array([\n    [1.0, 0.05],\n    [2.0, 0.045]\n    [5.0, 0.04]\n    ]))\n\ndataset = {\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\"USD\": discount_data},\n}\n</code></pre> <p>Or alternatively, using <code>np.column_stack</code> from two arrays</p> <pre><code>times = np.array([1.0, 2.0, 5.0])\nrates = np.array([0.05, 0.045, 0.04])\ndiscount_data = (\"ZERO_RATES\", np.column_stack((times, rates)))\n</code></pre> <p>For complete dataset see dataset</p>"},{"location":"utilities/","title":"Plots and more","text":"<p>(See Heston Notebook for complete example)</p> <p></p> <p>Utility to calculate option prices or implied volatility surface from a MC Simulation, for any model. This is useful for calibrating the model to Black-Scholes option prices.</p>"},{"location":"utilities/#finmc.plots.impliedvol.plot_iv","title":"<code>plot_iv(strikes, expirations, surface, atm_vols, fwds)</code>","text":"<p>Plot the implied volatility surface and forward curve.</p> <p>Parameters:</p> Name Type Description Default <code>strikes</code> <code>array</code> <p>The strike prices.</p> required <code>expirations</code> <code>array</code> <p>The expiration times.</p> required <code>surface</code> <code>array</code> <p>The implied volatility surface.</p> required <code>atm_vols</code> <code>array</code> <p>The ATM volatilities.</p> required <code>fwds</code> <code>array</code> <p>The forward prices</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot_iv(strikes, expirations, surface, atm_vols, fwds)\n</code></pre>"},{"location":"utilities/#finmc.plots.asset.plot_asset","title":"<code>plot_asset(model, asset_name, sample_idxs=np.arange(0, 3, 1), q_levels=np.linspace(0.02, 0.98, 25), times=np.linspace(0, 1, 101))</code>","text":"<p>Plot the progression of an asset in a model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>MCBase</code> <p>The model to use.</p> required <code>asset_name</code> <code>str</code> <p>The name of the asset to plot.</p> required <code>sample_idxs</code> <code>array</code> <p>The indices of the sample paths to plot in the foreground. Defaults to the first three.</p> <code>arange(0, 3, 1)</code> <code>q_levels</code> <code>array</code> <p>The quantiles to show in the background. Defaults to 25 levels from 2% to 98%.</p> <code>linspace(0.02, 0.98, 25)</code> <code>times</code> <code>array</code> <p>The timesteps. Defaults to 1 year in 100 steps.</p> <code>linspace(0, 1, 101)</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot_asset(model, \"SPX\")\n</code></pre>"},{"location":"utilities/#finmc.calc.impliedvol.iv_surface_mc","title":"<code>iv_surface_mc(strikes, expirations, asset_name, model, is_log=False)</code>","text":"<p>Calculate the implied volatility surface using MC Simulation.</p> <p>Parameters:</p> Name Type Description Default <code>strikes</code> <p>The strikes of the options.</p> required <code>expirations</code> <p>The expirations of the options in years.</p> required <code>asset_name</code> <code>str</code> <p>The name of the asset.</p> required <code>model</code> <code>MCBase</code> <p>The model used to simulate the asset price.</p> required <code>is_log</code> <code>bool</code> <p>if True, the strikes are in log, i.e. log(K/F).</p> <code>False</code> <p>Returns:</p> Type Description <p>A tuple containing the implied volatility surface, the ATM volatilities, and the forward prices.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; strikes = np.linspace(2900, 3100, 3)\n&gt;&gt;&gt; expirations = [0.25, 0.5, 1]\n&gt;&gt;&gt; surface, atm_vols, fwds = iv_surface_mc(strikes, expirations, \"SPX\", model)\n</code></pre>"},{"location":"models/api/","title":"Model API","text":"<p>You can write your own models, that are compatible with the utils and calculators in this package, or elsewhere. All models must inherit the base class finmc.models.base.MCBase</p>"},{"location":"models/api/#finmc.models.base.MCBase","title":"<code>MCBase</code>","text":"<p>Base class for a Monte-Carlo process.</p>"},{"location":"models/api/#finmc.models.base.MCBase.reset","title":"<code>reset()</code>  <code>abstractmethod</code>","text":"<p>The derived class must implement this method to reset the state of the model to time zero.</p>"},{"location":"models/api/#finmc.models.base.MCBase.get_value","title":"<code>get_value(unit)</code>","text":"<p>Return the value of the asset at the current time, if this asset is handled by the model, otherwise return None. The return value is none, float, or an np array of floats.</p>"},{"location":"models/api/#finmc.models.base.MCBase.get_df","title":"<code>get_df()</code>","text":"<p>Return the discount factor at the current time. The return value is a float, or an np array of floats.</p>"},{"location":"models/api/#finmc.models.base.MCBase.advance","title":"<code>advance(new_time)</code>  <code>abstractmethod</code>","text":"<p>The derived class must implement this method to advance the state of the model to a new time. The model may do so in multiple time steps.</p>"},{"location":"models/api/#finmc.models.base.MCFixedStep","title":"<code>MCFixedStep</code>","text":"<p>A Monte-Carlo process which breaks down the 'advance' step into fixed time steps specified by the TIMESTEP parameter.</p>"},{"location":"models/api/#finmc.models.base.MCFixedStep.step","title":"<code>step(new_time)</code>  <code>abstractmethod</code>","text":"<p>The derived class must implement this method, which advances the model by a timestep equal to or less than the TIMESTEP parameter.</p>"},{"location":"models/api/#example","title":"Example","text":"<pre><code># Define a single asset Black Scholes process with a flat volatility\nclass BSMC(MCFixedStep):\n    def reset(self):\n        # fetch the model parameters from the dataset\n        ...\n\n        # Initialize rng and any arrays\n        self.rng = Generator(SFC64(self.dataset[\"MC\"].get(\"SEED\")))\n        self.x_vec = np.zeros(self.n)  # process x (log stock)\n        self.cur_time = 0\n\n    def step(self, new_time):\n        \"\"\"Update x_vec in place when we move simulation by time dt.\"\"\"\n\n        dt = new_time - self.cur_time\n        fwd_rate = self.asset_fwd.rate(new_time, self.cur_time)\n\n        dz_vec = self.rng.standard_normal(self.n) * sqrt(dt) * self.vol\n        self.x_vec += (fwd_rate - self.vol * self.vol / 2.0) * dt + dz_vec\n\n        self.cur_time = new_time\n\n    def get_value(self, unit):\n        \"\"\"Return the value of the modeled asset at the current time.\"\"\"\n        if unit == self.asset:\n            return self.spot * np.exp(self.x_vec)\n\n    def get_df(self):\n        return self.discounter.discount(self.cur_time)\n</code></pre> <p>See complete code of BSMC here</p>"},{"location":"models/api/#examples-in-other-repos","title":"Examples in other repos","text":"<p>Examples using <code>MCFixedStep</code> as base</p> <ul> <li>Local Vol using SVI vols</li> <li>Qablet Intro to Custom Models</li> </ul> <p>Examples using <code>MCBase</code>:</p> <ul> <li>Rough Bergomi Model</li> </ul>"},{"location":"models/heston/","title":"Heston","text":""},{"location":"models/heston/#model","title":"Model","text":"<p>In the Heston model  the lognormal stock process \\(X_t\\) is given by,</p> \\[ dX_t = (\\mu - \\frac{\\nu_t}{2}) dt + \\sqrt \\nu_t dW_s \\] <p>and the variance follows the process $$ d \\nu_t = \\kappa (\\theta - \\nu_t) dt + \\xi \\sqrt \\nu_tdW_t $$</p> <p>where \\(dW_s\\) and \\(dW_t\\) are Wiener processes with correlation \\(\\rho\\).</p>"},{"location":"models/heston/#dataset","title":"Dataset","text":"<p>The model specific component in the dataset (<code>HESTON</code>) is a dict with the following parameters:</p> <ul> <li>ASSET: the name of the asset</li> <li>INITIAL_VAR: the initial variance \\(\\nu_0\\)</li> <li>LONG_VAR: the long variance \\(\\theta\\)</li> <li>VOL_OF_VOL: the volatility of the volatility \\(\\xi\\)</li> <li>MEANREV: the mean reversion rate \\(\\kappa\\)</li> <li>CORRELATION: the correlation \\(\\rho\\)</li> </ul>"},{"location":"models/heston/#example","title":"Example","text":"<pre><code>from finmc.models.heston import HestonMC\n\nheston_params = {\n    \"ASSET\": \"SPX\",\n    \"INITIAL_VAR\": 0.015,\n    \"LONG_VAR\": 0.052,\n    \"VOL_OF_VOL\": 0.88,\n    \"MEANREV\": 2.78,\n    \"CORRELATION\": -0.85,\n}\n</code></pre> <pre><code>dataset = {\n    \"MC\": {\"PATHS\": 100_000, \"TIMESTEP\": 1 / 250},\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\n        \"USD\": (\"ZERO_RATES\", np.array([[2.0, 0.05]])),\n        \"SPX\": (\"FORWARD\", np.array([[0.0, 5500], [1.0, 5600]])),\n    },\n    \"HESTON\": heston_params\n}\nmodel = HestonMC(dataset)\nmodel.advance(1.0)\nspots = model.get_value(\"SPX\")\n</code></pre> <p>See complete example here</p>"},{"location":"models/hullwhite/","title":"Hull-White","text":""},{"location":"models/hullwhite/#model","title":"Model","text":"<p>In the Hull White model, the short-rate follows the following process. $$ dr_t = [\\theta_t - a r_t]dt + \\sigma dW_t $$</p> <p>where \\(dW_t\\) is a Wiener process.</p>"},{"location":"models/hullwhite/#dataset","title":"Dataset","text":"<p>The model specific component in the dataset (<code>HW</code>) is a dict with the following parameters:</p> <ul> <li>ASSET: the name of the asset</li> <li>MEANREV: the mean reversion rate \\(a\\)</li> <li>VOL: the volatility of rate \\(\\sigma\\)</li> </ul> <p>Note: \\(\\theta_t\\) is calibrated by the model from the zero rate curve.</p>"},{"location":"models/hullwhite/#example","title":"Example","text":"<pre><code>from finmc.models.hullwhite import HullWhiteMC\n\ndataset = {\n    \"MC\": {\"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1},\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\"USD\": (\"ZERO_RATES\", np.array([[2.0, 0.05]]))},\n    \"HW\": {\n        \"ASSET\": \"USD\",\n        \"MEANREV\": 0.1,\n        \"VOL\": 0.03,\n    },\n}\n\nmodel = HullWhiteMC(dataset)\nmodel.advance(1.0)\ndiscount_factors = model.get_df()\n</code></pre> <p>See complete example here</p>"},{"location":"models/localvol/","title":"Local-Vol","text":""},{"location":"models/localvol/#model","title":"Model","text":"<p>In the Local Vol model the lognormal stock process \\(X_t\\) is given by,</p> \\[ dX_t = (\\mu - \\frac{\\sigma_t^2}{2}) dt + \\sigma_t dW_s \\] <p>Where \\(\\sigma_t\\) is a function of \\(X_t\\) and \\(t\\).</p>"},{"location":"models/localvol/#dataset","title":"Dataset","text":"<p>The model specific component in the dataset (<code>LV</code>) is a dict with the following parameters:</p> <ul> <li>ASSET: the name of the asset</li> <li>VOL: the volatility \\(\\sigma\\)</li> </ul> <p>The volatility can be expressed in a number of ways as described in following examples.</p>"},{"location":"models/localvol/#examples","title":"Examples","text":""},{"location":"models/localvol/#constant-vol","title":"Constant Vol","text":"<p>This is an example with constant local volatility, in which case it reduces to the Black-Scholes Model.</p> <pre><code>from finmc.models.localvol import LVMC\n\nlv_params = {\"ASSET\": \"SPX\", \"VOL\": 0.015}\n\ndataset = {\n    \"MC\": {\"PATHS\": 100_000, \"TIMESTEP\": 1 / 250},\n    \"BASE\": \"USD\",\n    \"ASSETS\": {\n        \"USD\": (\"ZERO_RATES\", np.array([[2.0, 0.05]])),\n        \"SPX\": (\"FORWARD\", np.array([[0.0, 5500], [1.0, 5600]])),\n    },\n    \"LV\": lv_params\n}\nmodel = LVMC(dataset)\nmodel.advance(1.0)\nspots = model.get_value(\"SPX\")\n</code></pre>"},{"location":"models/localvol/#vol-function","title":"Vol Function","text":"<p><code>VOL</code> can be a function as shown below.</p> <pre><code>def volfn(points):\n    # t is float, x_vec is a np array\n    (t, x_vec) = points\n\n    at = 5.0 * t + .01\n    atm = 0.04 + 0.01 * np.exp(-at)\n    skew = -1.5 * (1 - np.exp(-at)) / at\n    return np.sqrt(np.maximum(0.001, atm + x_vec * skew))\n\n\nlv_params = {\"ASSET\": \"SPX\", \"VOL\": volfn}\n</code></pre>"},{"location":"models/localvol/#vol-interpolator","title":"Vol Interpolator","text":"<p><code>VOL</code> can be an interpolator as below</p> <pre><code>from scipy.interpolate import RegularGridInterpolator\n\ntimes = [0.01, 0.2, 1.0]\nstrikes = [-5.0, -0.5, -0.1, 0.0, 0.1, 0.5, 5.0]\nvols = np.array([\n    [2.713, 0.884, 0.442, 0.222, 0.032, 0.032, 0.032],\n    [2.187, 0.719, 0.372, 0.209, 0.032, 0.032, 0.032],\n    [1.237, 0.435, 0.264, 0.200, 0.101, 0.032, 0.032]\n])\nvolinterp = RegularGridInterpolator(\n    (times, strikes), vols, fill_value=None, bounds_error=False\n)\n\nlv_params = {\"ASSET\": \"SPX\", \"VOL\": volinterp}\n</code></pre> <p>See complete example here</p>"}]}